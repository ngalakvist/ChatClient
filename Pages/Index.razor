@page "/"
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<hr />
<div class="container">
  <h2>
    Chatta med Mdh-Studentkonto AI-Bot
  </h2>
  <p></p>
  <p></p>
  <p></p>
  <form>
    <div class="form-group">
      <div id="scrollbox">

        @foreach (var chat in chatFlow)
        {
          <div class="@chat.CSS">
            <div class="user">Du: @chat.Question ?</div>
            <div class="msg">Miss-Bot: @chat.Answer.Trim('"')</div>
          </div>
          <p></p>
        }
        <hr />
        <input class="form-control" id="inputdefault" type="text" @bind="question">
        <p></p>
        <button type="button"  @onkeydown="@Enter" @onclick="GetReplyFromBot">  <span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>
      </div>
      </div>
</form>

</div>
@code {

  ChatFlow chat;
  string answer;
  string question;
  private IList<ChatFlow> chatFlow = new List<ChatFlow>();

  protected override void OnInitialized()
  {
    base.OnInitialized();
    chat = new ChatFlow();
    chat.Mine = true;
  }
  private async Task GetReplyFromBot()
  {
    try
    {
      if (!string.IsNullOrWhiteSpace(question))
      {
        var uri = "https://my-chat-bot.azurewebsites.net/chatbot/" + question;
        var client = new HttpClient();

        answer = await client.GetStringAsync(uri);
        AddChatFlow();
      }
    }
    catch (Exception)
    {
      var ans = "Kontakta studenttorget eller Gå till https://www.mdh.se/student";
      chatFlow.Add(new ChatFlow { Question = question, Answer = ans });
    }

  }

  private void AddChatFlow()
  {
    if (!string.IsNullOrWhiteSpace(question))
    {
      chatFlow.Add(new ChatFlow { Question = question, Answer = answer });
      question = string.Empty;
    }
  }

  public async Task Enter(KeyboardEventArgs e)
  {
    if (e.Code == "Enter" || e.Code == "NumpadEnter")
    {
      try
      {
        if (!string.IsNullOrWhiteSpace(question))
        {
          var uri = "https://my-chat-bot.azurewebsites.net/chatbot/" + question;
          var client = new HttpClient();

          answer = await client.GetStringAsync(uri);
          AddChatFlow();
        }
      }
      catch (Exception)
      {
        var ans = "Kontakta studenttorget eller Gå till https://www.mdh.se/student";
        chatFlow.Add(new ChatFlow { Question = question, Answer = ans });
      }
    }
  }

  public class ChatFlow
  {
    public string Question { get; set; }
    public string Answer { get; set; }
    public bool Mine { get; set; }

    /// <summary>
    /// Determine CSS classes to use for message div
    /// </summary>
    public string CSS
    {
      get
      {
        return Mine ? "sent" : "received";
      }
    }

  }
}
